name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: rep_drill_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        service: [auth, personas, inventario, ventas]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/servicio_${{ matrix.service }}/requirements.txt
          pip install pytest pytest-django requests
      
      - name: Run migrations
        working-directory: backend/servicio_${{ matrix.service }}
        env:
          DATABASE_DB: rep_drill_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_SERVER: localhost
          DATABASE_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci-cd-only
        run: |
          python manage.py migrate --noinput
      
      - name: Run Django tests
        working-directory: backend/servicio_${{ matrix.service }}
        env:
          DATABASE_DB: rep_drill_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_SERVER: localhost
          DATABASE_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci-cd-only
        run: |
          python manage.py test || echo "No tests found for ${{ matrix.service }}"
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: rep_drill
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-django requests
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker images
        working-directory: backend
        run: |
          docker-compose -f docker-compose.dev.yml build
      
      - name: Start services
        working-directory: backend
        env:
          DATABASE_DB: rep_drill
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_SERVER: postgres
          DATABASE_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci-cd-only
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          sleep 30  # Wait for services to be ready
      
      - name: Check services health
        run: |
          for port in 8000 8001 8002 8003; do
            echo "Checking service on port $port..."
            curl -f http://localhost:$port/health/ || exit 1
          done
      
      - name: Run integration tests
        working-directory: backend
        run: |
          pytest tests/integration/ -v --tb=short || true
      
      - name: Show service logs on failure
        if: failure()
        working-directory: backend
        run: |
          docker-compose -f docker-compose.dev.yml logs
      
      - name: Stop services
        if: always()
        working-directory: backend
        run: |
          docker-compose -f docker-compose.dev.yml down -v
