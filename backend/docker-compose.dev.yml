version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: rep_drill_postgres_dev
    environment:
      POSTGRES_DB: rep_drill
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev-network

  # Servicio de AutenticaciÃ³n (Puerto 8003)
  auth-service:
    build: 
      context: ./servicio_auth
      dockerfile: Dockerfile
    container_name: rep_drill_auth_dev
    environment:
      - SECRET_KEY=django-insecure-54)3sn^7k9btm5@h=ukrvve+#g&tnad=8@r6sxvk3r)zno59!b
      - DATABASE_DB=rep_drill
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=root
      - DATABASE_SERVER=postgres
      - DATABASE_PORT=5432
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,auth-service,0.0.0.0
    ports:
      - "8003:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./servicio_auth:/app
    networks:
      - dev-network
    restart: unless-stopped
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Servicio de Personas (Puerto 8000)
  personas-service:
    build: 
      context: ./servicio_personas
      dockerfile: DockerFile
    container_name: rep_drill_personas_dev
    environment:
      - SECRET_KEY=django-insecure-54)3sn^7k9btm5@h=ukrvve+#g&tnad=8@r6sxvk3r)zno59!b
      - DATABASE_DB=rep_drill
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=root
      - DATABASE_SERVER=postgres
      - DATABASE_PORT=5432
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,personas-service,0.0.0.0
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_started
    volumes:
      - ./servicio_personas:/app
    networks:
      - dev-network
    restart: unless-stopped
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Servicio de Inventario (Puerto 8001)
  inventario-service:
    build: 
      context: ./servicio_inventario
      dockerfile: DockerFile
    container_name: rep_drill_inventario_dev
    environment:
      - SECRET_KEY=django-insecure-54)3sn^7k9btm5@h=ukrvve+#g&tnad=8@r6sxvk3r)zno59!b
      - DATABASE_DB=rep_drill
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=root
      - DATABASE_SERVER=postgres
      - DATABASE_PORT=5432
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,inventario-service,0.0.0.0
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_started
    volumes:
      - ./servicio_inventario:/app
    networks:
      - dev-network
    restart: unless-stopped
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Servicio de Ventas (Puerto 8002)
  ventas-service:
    build: 
      context: ./servicio_ventas
      dockerfile: DockerFile
    container_name: rep_drill_ventas_dev
    environment:
      - SECRET_KEY=django-insecure-54)3sn^7k9btm5@h=ukrvve+#g&tnad=8@r6sxvk3r)zno59!b
      - DATABASE_DB=rep_drill
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=root
      - DATABASE_SERVER=postgres
      - DATABASE_PORT=5432
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,ventas-service,0.0.0.0
    ports:
      - "8002:8000"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_started
    volumes:
      - ./servicio_ventas:/app
    networks:
      - dev-network
    restart: unless-stopped
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

volumes:
  postgres_dev_data:

networks:
  dev-network:
    driver: bridge
    name: rep_drill_dev_network